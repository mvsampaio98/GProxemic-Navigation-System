robot_radius: 0.3
transform_tolerance: 2.0


obstacle_layer:
  enabled:              true
  min_obstacle_height: 0.0
  max_obstacle_height:  1.3
  mark_threshold:       0
  combination_method:   1
  obstacle_range: 2.5
  raytrace_range: 3.0
  observation_sources: laser_scan_sensor point_cloud_sensor
  laser_scan_sensor: {sensor_frame: base_footprint,
                      data_type: LaserScan,
                      topic: /pepper/laser_2,
                      marking: true,
                      clearing: true,
                      obstacle_range: 5.0}

  point_cloud_sensor: {sensor_frame: base_footprint,
                       data_type: PointCloud2,
                       topic: /pepper/camera/depth/points,
                       marking: true,
                       clearing: true}

#range_sensor_layer:
#  clear_threshold:    0.46
#  mark_threshold:     0.98
#  no_readings_timeout: 2.0
#  ns:     /pepper/
#  topics: ["sonar_front", "sonar_back"]

inflation_layer:
  enabled: true
  inflation_radius: 1.75
  cost_scaling_factor: 2.58

static_layer:
  topic: /map
  enabled:              true

#robot_radius: 0.25
#transform_tolerance: 2.0
#
## Plugin layer parameterisations
#obstacle_layer:
#  observation_sources: scan_laser point_cloud_sensor
#  footprint_clearing_enabled: true
#
#  enabled:              true
##  min_obstacle_height:  1.
#  max_obstacle_height:  1.3
#  origin_z:             0.0
#  z_resolution:         0.2
#  z_voxels:             3
#  unknown_threshold:    15
#  mark_threshold:       0
#  combination_method:   1
#  track_unknown_space:  true    #true needed for disabling global path planning through unknown space
#  obstacle_range: 1.1
#  raytrace_range: 2.0
#  origin_z: 0.0
#  z_resolution: 0.2
#  z_voxels: 3
#  publish_voxel_map: false
#
#
#  scan_laser: {
#    sensor_frame: base_footprint,
#    data_type: LaserScan,
#    topic: /pepper/laser_2,
#    marking: true,
#    clearing: true,
#    obstacle_range: 5.0
#  }
#
#  scan_depth: {
#    sensor_frame: base_footprint,
#    data_type: PointCloud2,
#    topic: /pepper/camera/depth/points,
#    marking: true,
#    clearing: true,
#    raytrace_range: 10.0,
#    obstacle_range: 2.5,
#    inf_is_valid: true
#  }
#
#range_sensor_layer:
#  clear_threshold:    0.46
#  mark_threshold:     0.98
#  no_readings_timeout: 2.0
#  ns:     /pepper/
#  topics: ["sonar_front", "sonar_back"]
#
#static_layer:
#  trinary_costmap: false
#
#inflation_layer:
#  inflation_radius: 1.75
#  cost_scaling_factor: 2.58




#max_obstacle_height: 0.60  # assume something like an arm is mounted on top of the robot
##robot_base_frame: /base_footprint
## Obstacle Cost Shaping (http://wiki.ros.org/costmap_2d/hydro/inflation)
#robot_radius: 0.25  # distance a circular robot should be clear of the obstacle (kobuki: 0.18)
## footprint: [[x0, y0], [x1, y1], ... [xn, yn]]  # if the robot is not circular
#robot_base_frame: base_link
#map_type: voxel
#
#obstacle_range: 1.1
#raytrace_range: 2
#
#obstacle_layer:
#  enabled:              true
#  max_obstacle_height:  0.6
#  origin_z:             0.0
#  z_resolution:         0.2
#  z_voxels:             3
#  unknown_threshold:    15
#  mark_threshold:       0
#  combination_method:   1
#  track_unknown_space:  true    #true needed for disabling global path planning through unknown space
#  obstacle_range: 1.1
#  raytrace_range: 2.0
#  origin_z: 0.0
#  z_resolution: 0.2
#  z_voxels: 3
#  publish_voxel_map: false
#  observation_sources:  scan
#  scan:
#    data_type: LaserScan
#    topic: /pepper_robot/camera/scan
#    marking: true
#    clearing: true
#    min_obstacle_height: 0.25
#    max_obstacle_height: 0.35
#
#  # for debugging only, let's you see the entire voxel grid
#
##cost_scaling_factor and inflation_radius were now moved to the inflation_layer ns
#inflation_layer:
#  enabled:              true
#  cost_scaling_factor:  5.0  # exponential rate at which the obstacle cost drops off (default: 10)
#  inflation_radius:     0.05  # max. distance from an obstacle at which costs are incurred for planning paths.
#
#static_layer:
#  enabled:              true
#
